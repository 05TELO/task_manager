x-default: &default
  restart: unless-stopped
  env_file: .env
  networks:
    default:

services:

  api:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-api
    image: ${IMAGE_NAME:-$COMPOSE_PROJECT_NAME}/api:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    # user: root
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://api:8000/api/health" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
      python manage.py collectstatic --noinput &&
      python manage.py migrate &&
      gunicorn --bind 0.0.0.0:8000 --workers 1 core.wsgi:application --reload"

  db:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-db
    image: postgres:17-alpine
    volumes:
      - db:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-redis
    image: bitnami/redis:6.2.5
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    expose:
      - 6379
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  worker:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-worker
    image: ${IMAGE_NAME:-$COMPOSE_PROJECT_NAME}/api:${IMAGE_TAG:-latest}
    command: celery -A core worker -l info --concurrency 1
    depends_on:
      redis:
        condition: service_healthy

  beat-worker:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-beat-worker
    image: ${IMAGE_NAME:-$COMPOSE_PROJECT_NAME}/api:${IMAGE_TAG:-latest}
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      redis:
        condition: service_healthy

  bot:
    <<: *default
    container_name: $COMPOSE_PROJECT_NAME-bot
    image: ${IMAGE_NAME:-$COMPOSE_PROJECT_NAME}/bot:latest
    build:
      context: .
      dockerfile: ./docker/Dockerfile.bot
    command: python -m bot
    depends_on:
      api:
        condition: service_healthy

volumes:
  db:

networks:
  default:
