[project]
name = "task_manager"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django-filter>=25.1",
    "django>=5.1.7",
    "djangorestframework>=3.15.2",
    "drf-spectacular>=0.28.0",
    "gunicorn>=23.0.0",
    "celery[redis]>=5.4.0",
    "django-celery-beat>=2.7.0",
    "pydantic-settings>=2.8.1",
    "drf-standardized-errors>=0.14.1",
    "drf-spectacular-sidecar>=2025.3.1",
    "psycopg2-binary>=2.9.10",
    "dj-database-url>=2.3.0",
    "whitenoise>=6.9.0",
    "httpx>=0.28.1",
    "aiogram>=3.20.0.post0",
    "pendulum>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "factory-boy>=3.3.3",
    "pytest>=8.3.5",
    "pytest-django>=4.11.1",
]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # Django specific
    "migrations",
    "tests.py",
    "conftest.py",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]

select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # pyflakes
    "Q", # flake8-quotes
    "D", # pydocstyle
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions,
    "DJ", # flake8-django
    "I", # isort
    "UP", # pyupgrade
    "ASYNC", # flake8-async
    "EM", # flake8-errmsg
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ERA", # eradicate
    "PIE", # flake8-pie
    "RUF", # Ruff-specific rules
    "N", # pep8-naming
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "PL", # Pylint
    "TRY", # tryceratops
    "PERF", # Perflint
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "RUF001", # String contains cyrillic
    "S101", # Use of `assert` detected
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]
"migrations/**.py" = ["E501"]   # line length
"tests.py" = ["S101"]  # use of `assert`

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "core.settings"
cache_dir = ".artifacts/pytest/"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py"
]
filterwarnings = [
    "ignore::DeprecationWarning",
]

